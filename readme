#!/bin/bash
node --inspect=9291 --experimental-json-modules -e 'import("./Blik_2020_seed.js").then(seed=>seed.open("./Blik_2020_root.js","./Blik_2020_parameters.json","https"))';
exit 0

Execute this readme to seed... 
Check to specify a route and a parameter module, 
the latter containing port, certification, authenticity, etc 
credentials for the protocol you specify. 

Acquisition (global) and bundling (local) of external dependencies, 
as well as testing are all implied, so forget nebulous build steps and 
skeuomorphic syntactical pollutions (babel, webpack, typescript, jsx etc.). 

These dependencies are defined in a separate, complacent 
"package.json" along with npm versioning. 
That's as suckless@http://suckless.org/philosophy/ as I could get. 


legend#strong : apple#scan{height:1em;fill:#b71c1c} ready dragon#scan{height:1em;fill:green} coming snail#scan{height:1em;fill:#795548} proposal worm#scan{height:1em} bug


syntax_rules#strong :
#1#strong one line: one statement.
#2#strong break before block specifiers,
ternary, array operators ([,]{}?:).
#3#strong indent blocks with one space.
order#strong : imports, exports, default export, internal functions, internal variables, expressions


corridor#scan{height:1em;fill:white}
root.js#strong
peer#strong : html form to transform a source from ./get. 
defaults to input path network. 
empty paths (*/) bind back here. 
hmac-key-authenticated peers get badges. 
react#strong : reproduction of peer with react. 
get#strong : this object and filesystem. 
put#strong : add to filesystem. 
delete#strong : delete from filesystem. 
mind.get#strong : registered peers. 
mind.put#strong : register peer. 
mind.delete#strong : unregister peer. 
signature.get#strong : peer identifiers. 
signature.put#strong : identify peer. 
signature.delete#strong : unidentify peer. 
order#strong : scheduled external request. 
mongo.get#strong : mongo cluster. 
matrix.get#strong : matrix cluster. 
google#strong : google api. 
modules#strong : module import hierarchy from babel-parser's abstract syntax tree
