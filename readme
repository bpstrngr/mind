#!/bin/bash
node --inspect=9291 --experimental-json-modules ./Blik_2020_route.js nodemon ./Blik_2020_source.js ./Blik_2020_parameters.json https;
exit 0
#node --inspect=9291 --experimental-json-modules -e 'import("./Blik_2020_route.js").then(route=>route.nodemon("./Blik_2020_source.js","./Blik_2020_parameters.json","https"))';

Execute this readme to seed a source. 
Check to specify a it along with a parameter module, 
containing port, certification, authenticity, etc 
credentials for a protocol you also specify. 

Acquisition (global) and bundling (local) of external dependencies, 
as well as testing are all explicit in the opening function.
No cryptic build steps (babel, webpack) or
syntactical skeuomorphisms (typescript, jsx etc.) used.

These dependencies are defined in a separate, complacent 
"package.json" along with npm versioning. 
That's as suckless@http://suckless.org/philosophy/ as I could get. 

legend#strong : apple#scan{height:1em;fill:#b71c1c} ready dragon#scan{height:1em;fill:green} coming snail#scan{height:1em;fill:#795548} proposal worm#scan{height:1em} bug

syntax_rules#strong :
#1#strong one line=one statement.
#2#strong break before block specifiers
, ternary and array operators ({}[,]?:).
#3#strong indent blocks and object literals with one space.
order#strong : direct expressions, imports, default export, exports, internal functions, internal variables.

seed.js#strong : trace path and method
to route[path].call(route,request) on source.
empty trails ("/") call "interface",
empty tracks fall back to source
(preserving route on bound this).
residual paths proceed on return value.

source#scan{height:1em;fill:white}
source.js#strong : exposed persistence apis (file/data), html interface.
query string is assigned to source form,
which is then performed (pre-submitted).
hmac-key-authenticated requests get badges.
get#strong : this object and filesystem. 
put#strong : add to filesystem. 
delete#strong : delete from filesystem. 
mind.get#strong : registered peers. 
mind.put#strong : register peer. 
mind.delete#strong : unregister peer. 
signature.get#strong : peer identifiers. 
signature.put#strong : identify peer. 
signature.delete#strong : unidentify peer. 
order#strong : scheduled external request. 
mongo.get#strong : mongo cluster. 
matrix.get#strong : matrix cluster. 
google#strong : google api. 
modules#strong : module import hierarchy from babel-parser's abstract syntax tree.
react#strong : reproduction of peer with react. 

actions#strong : trace node name, id and type route(event)=>actions[this.nodeName](event)

